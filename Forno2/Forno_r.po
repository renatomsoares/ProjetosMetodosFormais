THEORY ProofList IS
_f(1) & _f(2) & _f(18) & _f(19) & _f(129) & WellDefinedness_fazerAlimento.2,(_f(75) & _f(111) => _f(126));
_f(1) & _f(2) & _f(18) & _f(19) & _f(129) & WellDefinedness_fazerAlimento.1,(_f(75) & _f(111) => _f(125));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & WellDefinedness_cadastrarReceita.2,(_f(111) => _f(128));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & WellDefinedness_cadastrarReceita.1,(_f(111) => _f(127));
_f(1) & _f(2) & _f(18) & _f(19) & _f(58) & WellDefinedness_atualizarReceitaAdicinandoIngrediente.2,(_f(111) => _f(126));
_f(1) & _f(2) & _f(18) & _f(19) & _f(58) & WellDefinedness_atualizarReceitaAdicinandoIngrediente.1,(_f(111) => _f(125));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & WellDefinedness_decrementarIngredienteDoEstoque.6,(_f(111) => _f(124));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & WellDefinedness_decrementarIngredienteDoEstoque.5,(_f(111) => _f(123));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & WellDefinedness_decrementarIngredienteDoEstoque.4,(_f(111) => _f(115));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & WellDefinedness_decrementarIngredienteDoEstoque.3,(_f(111) => _f(114));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & WellDefinedness_decrementarIngredienteDoEstoque.2,(_f(111) => _f(113));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & WellDefinedness_decrementarIngredienteDoEstoque.1,(_f(111) => _f(112));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & WellDefinedness_incrementarIngredienteDoEstoque.6,(_f(111) => _f(122));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & WellDefinedness_incrementarIngredienteDoEstoque.5,(_f(111) => _f(121));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & WellDefinedness_incrementarIngredienteDoEstoque.4,(_f(111) => _f(115));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & WellDefinedness_incrementarIngredienteDoEstoque.3,(_f(111) => _f(114));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & WellDefinedness_incrementarIngredienteDoEstoque.2,(_f(111) => _f(113));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & WellDefinedness_incrementarIngredienteDoEstoque.1,(_f(111) => _f(112));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & WellDefinedness_inserirNovoIngredienteNoEstoque.6,(_f(39) & _f(111) => _f(115));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & WellDefinedness_inserirNovoIngredienteNoEstoque.5,(_f(39) & _f(111) => _f(114));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & WellDefinedness_inserirNovoIngredienteNoEstoque.4,(_f(39) & _f(111) => _f(113));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & WellDefinedness_inserirNovoIngredienteNoEstoque.3,(_f(39) & _f(111) => _f(112));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & WellDefinedness_inserirNovoIngredienteNoEstoque.2,(_f(111) => _f(120));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & WellDefinedness_inserirNovoIngredienteNoEstoque.1,(_f(111) => _f(119));
_f(1) & _f(2) & _f(18) & _f(19) & _f(110) & WellDefinedness_qntIngredienteNoEstoque.4,(_f(111) => _f(115));
_f(1) & _f(2) & _f(18) & _f(19) & _f(110) & WellDefinedness_qntIngredienteNoEstoque.3,(_f(111) => _f(114));
_f(1) & _f(2) & _f(18) & _f(19) & _f(110) & WellDefinedness_qntIngredienteNoEstoque.2,(_f(111) => _f(113));
_f(1) & _f(2) & _f(18) & _f(19) & _f(110) & WellDefinedness_qntIngredienteNoEstoque.1,(_f(111) => _f(112));
_f(1) & _f(2) & _f(18) & _f(19) & _f(74) & fazerAlimento.2,(_f(75) & _f(76) & _f(3) => _f(77));
_f(1) & _f(2) & _f(18) & _f(19) & _f(74) & fazerAlimento.1,(_f(25) => _f(26));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.9,(_f(3) & _f(16) => _f(73));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.8,(_f(3) & _f(14) => _f(62));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.7,(_f(3) & _f(60) => _f(72));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.6,(_f(3) & _f(70) => _f(71));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.5,(_f(3) & _f(68) => _f(69));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.4,(_f(3) & _f(10) => _f(67));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.3,(_f(3) & _f(8) => _f(66));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.2,(_f(3) & _f(64) => _f(65));
_f(1) & _f(2) & _f(18) & _f(19) & _f(63) & cadastrarReceita.1,(_f(3) & _f(4) => _f(59));
_f(1) & _f(2) & _f(18) & _f(19) & _f(58) & atualizarReceitaAdicinandoIngrediente.3,(_f(3) & _f(14) => _f(62));
_f(1) & _f(2) & _f(18) & _f(19) & _f(58) & atualizarReceitaAdicinandoIngrediente.2,(_f(3) & _f(60) => _f(61));
_f(1) & _f(2) & _f(18) & _f(19) & _f(58) & atualizarReceitaAdicinandoIngrediente.1,(_f(3) & _f(4) => _f(59));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & decrementarIngredienteDoEstoque.2,(_f(3) & _f(46) => _f(57));
_f(1) & _f(2) & _f(18) & _f(19) & _f(55) & decrementarIngredienteDoEstoque.1,(_f(3) & _f(12) => _f(56));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & incrementarIngredienteDoEstoque.2,(_f(3) & _f(46) => _f(54));
_f(1) & _f(2) & _f(18) & _f(19) & _f(52) & incrementarIngredienteDoEstoque.1,(_f(3) & _f(12) => _f(53));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.14,(_f(39) & _f(37) & _f(3) & _f(46) => _f(51));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.13,(_f(39) & _f(37) & _f(3) & _f(12) => _f(49));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.12,(_f(39) & _f(36) & _f(3) & _f(46) => _f(50));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.11,(_f(39) & _f(36) & _f(3) & _f(12) => _f(49));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.10,(_f(38) & _f(37) & _f(3) & _f(46) => _f(48));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.9,(_f(38) & _f(37) & _f(3) & _f(12) => _f(45));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.8,(_f(38) & _f(37) & _f(3) & _f(43) => _f(44));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.7,(_f(38) & _f(37) & _f(3) & _f(6) => _f(42));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.6,(_f(38) & _f(37) & _f(3) & _f(40) => _f(41));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.5,(_f(38) & _f(36) & _f(3) & _f(46) => _f(47));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.4,(_f(38) & _f(36) & _f(3) & _f(12) => _f(45));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.3,(_f(38) & _f(36) & _f(3) & _f(43) => _f(44));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.2,(_f(38) & _f(36) & _f(3) & _f(6) => _f(42));
_f(1) & _f(2) & _f(18) & _f(19) & _f(35) & inserirNovoIngredienteNoEstoque.1,(_f(38) & _f(36) & _f(3) & _f(40) => _f(41));
_f(1) & _f(2) & _f(18) & _f(19) & _f(31) & decrementaTempo.2,(_f(3) & _f(33) => _f(34));
_f(1) & _f(2) & _f(18) & _f(19) & _f(31) & decrementaTempo.1,(_f(25) => _f(32));
_f(1) & _f(2) & _f(18) & _f(19) & _f(28) & destravarForno.2,(_f(3) & _f(27) => _f(30));
_f(1) & _f(2) & _f(18) & _f(19) & _f(28) & destravarForno.1,(_f(25) => _f(29));
_f(1) & _f(2) & _f(18) & _f(19) & _f(24) & travarForno.2,(_f(3) & _f(27) => _f(5));
_f(1) & _f(2) & _f(18) & _f(19) & _f(24) & travarForno.1,(_f(25) => _f(26));
_f(1) & _f(2) & _f(18) & _f(19) & _f(22) & qntIngredienteNoEstoque.1,(_f(3) => _f(23));
_f(1) & _f(2) & _f(18) & _f(19) & _f(20) & numIngredientesNoEstoque.1,(_f(3) => _f(21));
_f(1) & _f(2) & Initialisation.7,(_f(3) & _f(16) => _f(17));
_f(1) & _f(2) & Initialisation.6,(_f(3) & _f(14) => _f(15));
_f(1) & _f(2) & Initialisation.5,(_f(3) & _f(12) => _f(13));
_f(1) & _f(2) & Initialisation.4,(_f(3) & _f(10) => _f(11));
_f(1) & _f(2) & Initialisation.3,(_f(3) & _f(8) => _f(9));
_f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
_f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
INGREDIENTES: FIN(INTEGER) & not(INGREDIENTES = {}) & ALIMENTO: FIN(INTEGER) & not(ALIMENTO = {});
"Refinement is correct";
"Check invariant ((qtd_alimento$1) : (NAT))";
((0) : (NAT));
"Check invariant ((existe$1) : (((INGREDIENTES) --> (NAT))))";
(({}) : (((INGREDIENTES) --> (NAT))));
"Check invariant ((r_potencia$1) : (((((0) .. (15))) --> ((NAT-{0})))))";
(({}) : (((((0) .. (15))) --> ((NAT-{0})))));
"Check invariant (((r_potencia$1 )[((0) .. (15))]) = (ran(potencia_alimento_valor)))";
((({} )[((0) .. (15))]) = (ran({})));
"Check invariant ((r_estoque$1) : (((((0) .. (15))) --> (NAT))))";
(({}) : (((((0) .. (15))) --> (NAT))));
"Check invariant ((r_ingredientes$1) : (((((0) .. (15))) --> (INGREDIENTES))))";
(({}) : (((((0) .. (15))) --> (INGREDIENTES))));
"Check invariant ((r_receita$1) : (((ALIMENTO) --> (NAT))))";
(({}) : (((ALIMENTO) --> (NAT))));
((receita_alimento_ingrediente) : (((ALIMENTO) <-> (POW(INGREDIENTES))))) & ((receita_ingrediente_quantidade) : (((POW(INGREDIENTES)) <-> ((NAT-{0}))))) & ((estoque_ingrediente_quantidade) : (((INGREDIENTES) +-> (((0) .. (2000)))))) & ((potencia_alimento_valor) : (((ALIMENTO) +-> (((150) .. (260)))))) & ((temporizador_alimento_valor) : (((ALIMENTO) +-> (((1) .. (7200)))))) & ((cronometro) : (((0) .. (7200)))) & ((potencia) : (((0) .. (260)))) & ((trava) : (NAT)) & ((index_ingrediente) : (((((0) .. (card(dom(estoque_ingrediente_quantidade))))) +-> (INGREDIENTES)))) & ((tempoUso) : (((0) .. (7200))));
((qtd_alimento$1) : (NAT)) & ((qtd_ing_estoque$1) : (NAT)) & ((qtd_receita$1) : (NAT)) & existe$1 : INGREDIENTES +-> NAT & dom(existe$1) = INGREDIENTES & ((existe$1) : (((INGREDIENTES) --> (NAT)))) & r_in_index$1 : INGREDIENTES +-> NAT & dom(r_in_index$1) = INGREDIENTES & ((r_in_index$1) : (((INGREDIENTES) --> (NAT)))) & ((r_trava$1) : (NAT)) & r_potencia$1 : ((0) .. (15)) +-> (NAT-{0}) & dom(r_potencia$1) = ((0) .. (15)) & ((r_potencia$1) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_potencia$1 )[((0) .. (15))]) = (ran(potencia_alimento_valor))) & r_tempo$1 : ((0) .. (15)) +-> (NAT-{0}) & dom(r_tempo$1) = ((0) .. (15)) & ((r_tempo$1) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_tempo$1 )[((0) .. (15))]) = (ran(temporizador_alimento_valor))) & r_estoque$1 : ((0) .. (15)) +-> NAT & dom(r_estoque$1) = ((0) .. (15)) & ((r_estoque$1) : (((((0) .. (15))) --> (NAT)))) & (((r_estoque$1 )[((0) .. (15))]) = (ran(estoque_ingrediente_quantidade))) & r_alimento$1 : ((0) .. (15)) +-> NAT & dom(r_alimento$1) = ((0) .. (15)) & ((r_alimento$1) : (((((0) .. (15))) --> (NAT)))) & r_ingredientes$1 : ((0) .. (15)) +-> INGREDIENTES & dom(r_ingredientes$1) = ((0) .. (15)) & ((r_ingredientes$1) : (((((0) .. (15))) --> (INGREDIENTES)))) & r_receita$1 : ALIMENTO +-> NAT & dom(r_receita$1) = ALIMENTO & ((r_receita$1) : (((ALIMENTO) --> (NAT)))) & ((r_cronometro$1) : (NAT));
((ee) = (ee$1));
((card(dom(estoque_ingrediente_quantidade))) = (qtd_ing_estoque$1));
((ii) : (INGREDIENTES)) & ((ii) : (dom(estoque_ingrediente_quantidade))) & ((qq) = (qq$1));
(((estoque_ingrediente_quantidade )(ii)) = ((r_estoque$1 )((r_in_index$1 )(ii))));
((trava) = (0));
"Precondition can be deduced";
((r_trava$1) = (1));
"Check invariant ((r_trava$1) : (NAT))";
((trava) = (1)) & ((cronometro) = (0));
((r_trava$1) = (0));
((1) : (NAT));
(0 +1 <= cronometro);
(0 +1 <= r_cronometro$1);
"Check invariant ((r_cronometro$1) : (NAT))";
(((r_cronometro$1 - 1)) : (NAT));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 2000) & (0 +1 <= qq) & not(ii : dom(estoque_ingrediente_quantidade)) & ((trava) = (0));
not(ii : dom(estoque_ingrediente_quantidade));
not(not(ii : dom(estoque_ingrediente_quantidade)));
(((existe$1 )(ii)) = (0));
not((((existe$1 )(ii)) = (0)));
"Check invariant ((qtd_ing_estoque$1) : (NAT))";
(((qtd_ing_estoque$1 + 1)) : (NAT));
((((existe$1) <+ (({((ii) |-> (1))})))) : (((INGREDIENTES) --> (NAT))));
"Check invariant ((r_in_index$1) : (((INGREDIENTES) --> (NAT))))";
((((r_in_index$1) <+ (({((ii) |-> ((qtd_ing_estoque$1 + 1)))})))) : (((INGREDIENTES) --> (NAT))));
((((r_estoque$1) <+ (({(((qtd_ing_estoque$1 + 1)) |-> (qq))})))) : (((((0) .. (15))) --> (NAT))));
"Check invariant (((r_estoque$1 )[((0) .. (15))]) = (ran(estoque_ingrediente_quantidade)))";
(((((r_estoque$1) <+ (({(((qtd_ing_estoque$1 + 1)) |-> (qq))}))) )[((0) .. (15))]) = (ran(((estoque_ingrediente_quantidade) \/ (({((ii) |-> (qq))}))))));
(((((r_estoque$1) <+ (({(((qtd_ing_estoque$1 + 1)) |-> (qq))}))) )[((0) .. (15))]) = (ran(estoque_ingrediente_quantidade)));
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (((r_estoque$1 )((r_in_index$1 )(ii)) + qq)))})))) : (((((0) .. (15))) --> (NAT))));
(((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (((r_estoque$1 )((r_in_index$1 )(ii)) + qq)))}))) )[((0) .. (15))]) = (ran(((estoque_ingrediente_quantidade) \/ (({((ii) |-> (qq))}))))));
(((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (((r_estoque$1 )((r_in_index$1 )(ii)) + qq)))}))) )[((0) .. (15))]) = (ran(estoque_ingrediente_quantidade)));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 2000) & (0 +1 <= qq) & ((ii) : (dom(estoque_ingrediente_quantidade))) & ((estoque_ingrediente_quantidade )(ii) +1 <= 2000) & ((trava) = (0));
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (min(({((r_estoque$1 )((r_in_index$1 )(ii)) + qq)}\/{10}))))})))) : (((((0) .. (15))) --> (NAT))));
(((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (min(({((r_estoque$1 )((r_in_index$1 )(ii)) + qq)}\/{10}))))}))) )[((0) .. (15))]) = (ran(((estoque_ingrediente_quantidade) <+ (({((ii) |-> (min(({((estoque_ingrediente_quantidade )(ii) + qq)}\/{2000}))))}))))));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 2000) & (0 +1 <= qq) & ((ii) : (dom(estoque_ingrediente_quantidade))) & ((trava) = (0)) & ((estoque_ingrediente_quantidade )(ii) +1 <= 2000);
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (max(({((r_estoque$1 )((r_in_index$1 )(ii)) - qq)}\/{0}))))})))) : (((((0) .. (15))) --> (NAT))));
(((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (max(({((r_estoque$1 )((r_in_index$1 )(ii)) - qq)}\/{0}))))}))) )[((0) .. (15))]) = (ran(((estoque_ingrediente_quantidade) <+ (({((ii) |-> (max(({((estoque_ingrediente_quantidade )(ii) - qq)}\/{0}))))}))))));
((ii) : (INGREDIENTES)) & ((aa) : (ALIMENTO)) & ((aa) : (dom(temporizador_alimento_valor))) & ((aa) : (dom(potencia_alimento_valor))) & ((trava) = (0));
(((qtd_alimento$1 + 1)) : (NAT));
"Check invariant ((r_alimento$1) : (((((0) .. (15))) --> (NAT))))";
((((r_alimento$1) <+ (({(((qtd_alimento$1 + 1)) |-> ((r_receita$1 )(aa)))})))) : (((((0) .. (15))) --> (NAT))));
((((r_ingredientes$1) <+ (({(((qtd_alimento$1 + 1)) |-> (ii))})))) : (((((0) .. (15))) --> (INGREDIENTES))));
((ii) : (INGREDIENTES)) & ((aa) : (ALIMENTO)) & ((tt) : (((1) .. (7200)))) & ((pp) : (((150) .. (260)))) & not(aa : dom(temporizador_alimento_valor)) & not(aa : dom(potencia_alimento_valor)) & ((trava) = (0));
"Check invariant ((qtd_receita$1) : (NAT))";
(((qtd_receita$1 + 1)) : (NAT));
((((r_potencia$1) <+ (({(((qtd_receita$1 + 1)) |-> (pp))})))) : (((((0) .. (15))) --> ((NAT-{0})))));
(((((r_potencia$1) <+ (({(((qtd_receita$1 + 1)) |-> (pp))}))) )[((0) .. (15))]) = (ran(((potencia_alimento_valor) \/ (({((aa) |-> (pp))}))))));
"Check invariant ((r_tempo$1) : (((((0) .. (15))) --> ((NAT-{0})))))";
((((r_tempo$1) <+ (({(((qtd_receita$1 + 1)) |-> (tt))})))) : (((((0) .. (15))) --> ((NAT-{0})))));
"Check invariant (((r_tempo$1 )[((0) .. (15))]) = (ran(temporizador_alimento_valor)))";
(((((r_tempo$1) <+ (({(((qtd_receita$1 + 1)) |-> (tt))}))) )[((0) .. (15))]) = (ran(((temporizador_alimento_valor) \/ (({((aa) |-> (tt))}))))));
((((r_alimento$1) <+ (({(((qtd_alimento$1 + 1)) |-> ((((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))}))) )(aa)))})))) : (((((0) .. (15))) --> (NAT))));
((((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))})))) : (((ALIMENTO) --> (NAT))));
((aa) : (ALIMENTO)) & ((aa) : (dom(receita_alimento_ingrediente))) & ((trava) = (0));
((xx) : (ran(r_alimento$1)));
((xx) = ((r_receita$1 )(aa)));
#(yy).(((yy) : ((receita_alimento_ingrediente )(aa))) & (((0 +1 <= (estoque_ingrediente_quantidade )(yy))) => (((qtd_alimento$1) : (NAT)) & ((qtd_ing_estoque$1) : (NAT)) & ((qtd_receita$1) : (NAT)) & ((existe$1) : (((INGREDIENTES) --> (NAT)))) & ((r_in_index$1) : (((INGREDIENTES) --> (NAT)))) & ((0) : (NAT)) & ((r_potencia$1) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_potencia$1 )[((0) .. (15))]) = (ran(potencia_alimento_valor))) & ((r_tempo$1) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_tempo$1 )[((0) .. (15))]) = (ran(temporizador_alimento_valor))) & ((((r_estoque$1) <+ (({(((r_in_index$1 )((r_ingredientes$1 )(xx))) |-> (((r_estoque$1 )((r_in_index$1 )((r_ingredientes$1 )(xx))) - 1)))})))) : (((((0) .. (15))) --> (NAT)))) & (((((r_estoque$1) <+ (({(((r_in_index$1 )((r_ingredientes$1 )(xx))) |-> (((r_estoque$1 )((r_in_index$1 )((r_ingredientes$1 )(xx))) - 1)))}))) )[((0) .. (15))]) = (ran(((estoque_ingrediente_quantidade) <+ (({((yy) |-> (max(({((estoque_ingrediente_quantidade )(yy) - 1)}\/{0}))))})))))) & ((r_alimento$1) : (((((0) .. (15))) --> (NAT)))) & ((r_ingredientes$1) : (((((0) .. (15))) --> (INGREDIENTES)))) & ((r_receita$1) : (((ALIMENTO) --> (NAT)))) & ((r_cronometro$1) : (NAT)))) & ((not((0 +1 <= (estoque_ingrediente_quantidade )(yy)))) => (((qtd_alimento$1) : (NAT)) & ((qtd_ing_estoque$1) : (NAT)) & ((qtd_receita$1) : (NAT)) & ((existe$1) : (((INGREDIENTES) --> (NAT)))) & ((r_in_index$1) : (((INGREDIENTES) --> (NAT)))) & ((0) : (NAT)) & ((r_potencia$1) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_potencia$1 )[((0) .. (15))]) = (ran(potencia_alimento_valor))) & ((r_tempo$1) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_tempo$1 )[((0) .. (15))]) = (ran(temporizador_alimento_valor))) & ((((r_estoque$1) <+ (({(((r_in_index$1 )((r_ingredientes$1 )(xx))) |-> (((r_estoque$1 )((r_in_index$1 )((r_ingredientes$1 )(xx))) - 1)))})))) : (((((0) .. (15))) --> (NAT)))) & (((((r_estoque$1) <+ (({(((r_in_index$1 )((r_ingredientes$1 )(xx))) |-> (((r_estoque$1 )((r_in_index$1 )((r_ingredientes$1 )(xx))) - 1)))}))) )[((0) .. (15))]) = (ran(estoque_ingrediente_quantidade))) & ((r_alimento$1) : (((((0) .. (15))) --> (NAT)))) & ((r_ingredientes$1) : (((((0) .. (15))) --> (INGREDIENTES)))) & ((r_receita$1) : (((ALIMENTO) --> (NAT)))) & ((r_cronometro$1) : (NAT)))));
btrue;
r_receita$1 : ALIMENTO +-> NAT;
dom(r_receita$1) = ALIMENTO;
((r_receita$1) : (((ALIMENTO) --> (NAT))));
r_ingredientes$1 : ((0) .. (15)) +-> INGREDIENTES;
dom(r_ingredientes$1) = ((0) .. (15));
((r_ingredientes$1) : (((((0) .. (15))) --> (INGREDIENTES))));
r_alimento$1 : ((0) .. (15)) +-> NAT;
dom(r_alimento$1) = ((0) .. (15));
((r_alimento$1) : (((((0) .. (15))) --> (NAT))));
(((r_estoque$1 )[((0) .. (15))]) = (ran(estoque_ingrediente_quantidade)));
r_estoque$1 : ((0) .. (15)) +-> NAT;
dom(r_estoque$1) = ((0) .. (15));
((r_estoque$1) : (((((0) .. (15))) --> (NAT))));
(((r_tempo$1 )[((0) .. (15))]) = (ran(temporizador_alimento_valor)));
r_tempo$1 : ((0) .. (15)) +-> (NAT-{0});
dom(r_tempo$1) = ((0) .. (15));
((r_tempo$1) : (((((0) .. (15))) --> ((NAT-{0})))));
(((r_potencia$1 )[((0) .. (15))]) = (ran(potencia_alimento_valor)));
r_potencia$1 : ((0) .. (15)) +-> (NAT-{0});
dom(r_potencia$1) = ((0) .. (15));
((r_potencia$1) : (((((0) .. (15))) --> ((NAT-{0})))));
((r_trava$1) : (NAT));
r_in_index$1 : INGREDIENTES +-> NAT;
dom(r_in_index$1) = INGREDIENTES;
((r_in_index$1) : (((INGREDIENTES) --> (NAT))));
existe$1 : INGREDIENTES +-> NAT;
dom(existe$1) = INGREDIENTES;
((existe$1) : (((INGREDIENTES) --> (NAT))));
((qtd_receita$1) : (NAT));
((qtd_ing_estoque$1) : (NAT));
((qtd_alimento$1) : (NAT));
((ii) : (INGREDIENTES)) & ((ii) : (dom(estoque_ingrediente_quantidade)));
"Well definedness";
((ii) : (dom(r_in_index$1)));
((r_in_index$1) : (((dom(r_in_index$1)) +-> (ran(r_in_index$1)))));
(((r_in_index$1 )(ii)) : (dom(r_estoque$1)));
((r_estoque$1) : (((dom(r_estoque$1)) +-> (ran(r_estoque$1)))));
((trava) = (0)) & ((r_trava$1) = (1));
((trava) = (1)) & ((cronometro) = (0)) & ((r_trava$1) = (0));
(0 +1 <= cronometro) & (0 +1 <= r_cronometro$1);
((ii) : (dom(existe$1)));
((existe$1) : (((dom(existe$1)) +-> (ran(existe$1)))));
not(((({((r_estoque$1 )((r_in_index$1 )(ii)) + qq)}\/{10})) = ({})));
((((({((r_estoque$1 )((r_in_index$1 )(ii)) + qq)}\/{10})) /\ ((INTEGER - NATURAL)))) : (FIN(INTEGER)));
not(((({((r_estoque$1 )((r_in_index$1 )(ii)) - qq)}\/{0})) = ({})));
((((({((r_estoque$1 )((r_in_index$1 )(ii)) - qq)}\/{0})) /\ (NATURAL))) : (FIN(NATURAL)));
((aa) : (dom(r_receita$1)));
((r_receita$1) : (((dom(r_receita$1)) +-> (ran(r_receita$1)))));
((aa) : (dom(((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))}))))));
((((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))})))) : (((dom(((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))}))))) +-> (ran(((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))}))))))));
((aa) : (ALIMENTO)) & ((aa) : (dom(receita_alimento_ingrediente))) & ((trava) = (0)) & ((r_trava$1) = (1))
END
&
THEORY EnumerateX
END
