THEORY ProofList IS
_f(1) & _f(2) & _f(22) & _f(47) & WellDefinedness_fazerAlimento.3,(_f(64) => _f(82));
_f(1) & _f(2) & _f(22) & _f(47) & WellDefinedness_fazerAlimento.2,(_f(64) => _f(87));
_f(1) & _f(2) & _f(22) & _f(47) & WellDefinedness_fazerAlimento.1,(_f(64) => _f(79));
_f(1) & _f(2) & _f(22) & _f(41) & WellDefinedness_atualizarReceitaAdicinandoIngrediente.2,(_f(64) => _f(82));
_f(1) & _f(2) & _f(22) & _f(41) & WellDefinedness_atualizarReceitaAdicinandoIngrediente.1,(_f(64) => _f(81));
_f(1) & _f(2) & _f(22) & _f(38) & WellDefinedness_decrementarIngredienteDoEstoque.3,(_f(64) => _f(77));
_f(1) & _f(2) & _f(22) & _f(38) & WellDefinedness_decrementarIngredienteDoEstoque.2,(_f(64) => _f(76));
_f(1) & _f(2) & _f(22) & _f(38) & WellDefinedness_decrementarIngredienteDoEstoque.1,(_f(64) => _f(67));
_f(1) & _f(2) & _f(22) & WellDefinedness_Precondition_decrementarIngredienteDoEstoque.1,(_f(66) & _f(71) & _f(70) & _f(69) & _f(73) & _f(25) & _f(64) => _f(67));
_f(1) & _f(2) & _f(22) & _f(35) & WellDefinedness_incrementarIngredienteDoEstoque.3,(_f(64) => _f(75));
_f(1) & _f(2) & _f(22) & _f(35) & WellDefinedness_incrementarIngredienteDoEstoque.2,(_f(64) => _f(74));
_f(1) & _f(2) & _f(22) & _f(35) & WellDefinedness_incrementarIngredienteDoEstoque.1,(_f(64) => _f(67));
_f(1) & _f(2) & _f(22) & WellDefinedness_Precondition_incrementarIngredienteDoEstoque.1,(_f(66) & _f(71) & _f(70) & _f(69) & _f(73) & _f(64) => _f(67));
_f(1) & _f(2) & _f(22) & _f(30) & WellDefinedness_inserirNovoIngredienteNoEstoque.1,(_f(31) & _f(64) => _f(65));
_f(1) & _f(2) & _f(22) & _f(24) & WellDefinedness_qntIngredienteNoEstoque.1,(_f(64) => _f(67));
_f(1) & _f(2) & _f(22) & _f(23) & WellDefinedness_numIngredientesNoEstoque.1,(_f(64) => _f(65));
_f(1) & _f(2) & WellDefinednessInvariant.1,(_f(63) & _f(62) & _f(61) & _f(60) & _f(59) & _f(58) & _f(57) & _f(56) & _f(64) => _f(65));
_f(1) & _f(2) & _f(22) & _f(47) & fazerAlimento.6,(_f(50) & _f(49) & _f(3) & _f(18) => _f(26));
_f(1) & _f(2) & _f(22) & _f(47) & fazerAlimento.5,(_f(50) & _f(49) & _f(3) & _f(14) => _f(52));
_f(1) & _f(2) & _f(22) & _f(47) & fazerAlimento.4,(_f(50) & _f(48) & _f(3) & _f(20) => _f(53));
_f(1) & _f(2) & _f(22) & _f(47) & fazerAlimento.3,(_f(50) & _f(48) & _f(3) & _f(18) => _f(26));
_f(1) & _f(2) & _f(22) & _f(47) & fazerAlimento.2,(_f(50) & _f(48) & _f(3) & _f(14) => _f(52));
_f(1) & _f(2) & _f(22) & _f(47) & fazerAlimento.1,(_f(50) & _f(48) & _f(3) & _f(8) => _f(51));
_f(1) & _f(2) & _f(22) & _f(43) & cadastrarReceita.3,(_f(3) & _f(12) => _f(46));
_f(1) & _f(2) & _f(22) & _f(43) & cadastrarReceita.2,(_f(3) & _f(10) => _f(45));
_f(1) & _f(2) & _f(22) & _f(43) & cadastrarReceita.1,(_f(3) & _f(4) => _f(44));
_f(1) & _f(2) & _f(22) & _f(41) & atualizarReceitaAdicinandoIngrediente.1,(_f(3) & _f(4) => _f(42));
_f(1) & _f(2) & _f(22) & _f(38) & decrementarIngredienteDoEstoque.2,(_f(3) & _f(20) => _f(40));
_f(1) & _f(2) & _f(22) & _f(38) & decrementarIngredienteDoEstoque.1,(_f(3) & _f(8) => _f(39));
_f(1) & _f(2) & _f(22) & _f(35) & incrementarIngredienteDoEstoque.2,(_f(3) & _f(20) => _f(37));
_f(1) & _f(2) & _f(22) & _f(35) & incrementarIngredienteDoEstoque.1,(_f(3) & _f(8) => _f(36));
_f(1) & _f(2) & _f(22) & _f(30) & inserirNovoIngredienteNoEstoque.2,(_f(31) & _f(3) & _f(20) => _f(34));
_f(1) & _f(2) & _f(22) & _f(30) & inserirNovoIngredienteNoEstoque.1,(_f(31) & _f(3) & _f(8) => _f(33));
_f(1) & _f(2) & _f(22) & _f(28) & decrementaTempo.1,(_f(3) & _f(14) => _f(29));
_f(1) & _f(2) & _f(22) & _f(27) & destravarForno.1,(_f(3) & _f(18) => _f(19));
_f(1) & _f(2) & _f(22) & _f(25) & travarForno.1,(_f(3) & _f(18) => _f(26));
_f(1) & _f(2) & Initialisation.9,(_f(3) & _f(20) => _f(21));
_f(1) & _f(2) & Initialisation.8,(_f(3) & _f(18) => _f(19));
_f(1) & _f(2) & Initialisation.7,(_f(3) & _f(16) => _f(17));
_f(1) & _f(2) & Initialisation.6,(_f(3) & _f(14) => _f(15));
_f(1) & _f(2) & Initialisation.5,(_f(3) & _f(12) => _f(13));
_f(1) & _f(2) & Initialisation.4,(_f(3) & _f(10) => _f(11));
_f(1) & _f(2) & Initialisation.3,(_f(3) & _f(8) => _f(9));
_f(1) & _f(2) & Initialisation.2,(_f(3) & _f(6) => _f(7));
_f(1) & _f(2) & Initialisation.1,(_f(3) & _f(4) => _f(5))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
INGREDIENTES: FIN(INTEGER) & not(INGREDIENTES = {}) & ALIMENTO: FIN(INTEGER) & not(ALIMENTO = {});
"Invariant is preserved";
"Check invariant ((receita_alimento_ingrediente) : (((ALIMENTO) <-> (POW(INGREDIENTES)))))";
(({}) : (((ALIMENTO) <-> (POW(INGREDIENTES)))));
"Check invariant ((receita_ingrediente_quantidade) : (((POW(INGREDIENTES)) <-> ((NAT-{0})))))";
(({}) : (((POW(INGREDIENTES)) <-> ((NAT-{0})))));
"Check invariant ((estoque_ingrediente_quantidade) : (((INGREDIENTES) +-> (((0) .. (2000))))))";
(({}) : (((INGREDIENTES) +-> (((0) .. (2000))))));
"Check invariant ((potencia_alimento_valor) : (((ALIMENTO) +-> (((150) .. (260))))))";
(({}) : (((ALIMENTO) +-> (((150) .. (260))))));
"Check invariant ((temporizador_alimento_valor) : (((ALIMENTO) +-> (((1) .. (7200))))))";
(({}) : (((ALIMENTO) +-> (((1) .. (7200))))));
"Check invariant ((cronometro) : (((0) .. (7200))))";
((0) : (((0) .. (7200))));
"Check invariant ((potencia) : (((0) .. (260))))";
((0) : (((0) .. (260))));
"Check invariant ((trava) : (NAT))";
((0) : (NAT));
"Check invariant ((index_ingrediente) : (((((0) .. (card(dom(estoque_ingrediente_quantidade))))) +-> (INGREDIENTES))))";
(({}) : (((((0) .. (card(dom({}))))) +-> (INGREDIENTES))));
((receita_alimento_ingrediente) : (((ALIMENTO) <-> (POW(INGREDIENTES))))) & ((receita_ingrediente_quantidade) : (((POW(INGREDIENTES)) <-> ((NAT-{0}))))) & ((estoque_ingrediente_quantidade) : (((INGREDIENTES) +-> (((0) .. (2000)))))) & ((potencia_alimento_valor) : (((ALIMENTO) +-> (((150) .. (260)))))) & ((temporizador_alimento_valor) : (((ALIMENTO) +-> (((1) .. (7200)))))) & ((cronometro) : (((0) .. (7200)))) & ((potencia) : (((0) .. (260)))) & ((trava) : (NAT)) & ((index_ingrediente) : (((((0) .. (card(dom(estoque_ingrediente_quantidade))))) +-> (INGREDIENTES)))) & ((tempoUso) : (((0) .. (7200))));
btrue;
((ii) : (INGREDIENTES)) & ((ii) : (dom(estoque_ingrediente_quantidade)));
((trava) = (0));
((1) : (NAT));
((trava) = (1)) & ((cronometro) = (0));
(0 +1 <= cronometro);
(((cronometro - 1)) : (((0) .. (7200))));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 2000) & (0 +1 <= qq) & not(ii : dom(estoque_ingrediente_quantidade)) & ((trava) = (0));
not(ii : dom(estoque_ingrediente_quantidade));
not(not(ii : dom(estoque_ingrediente_quantidade)));
((((estoque_ingrediente_quantidade) \/ (({((ii) |-> (qq))})))) : (((INGREDIENTES) +-> (((0) .. (2000))))));
((((index_ingrediente) \/ (({((card(dom(estoque_ingrediente_quantidade))) |-> (ii))})))) : (((((0) .. (card(dom(((estoque_ingrediente_quantidade) \/ (({((ii) |-> (qq))})))))))) +-> (INGREDIENTES))));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 2000) & (0 +1 <= qq) & ((ii) : (dom(estoque_ingrediente_quantidade))) & ((estoque_ingrediente_quantidade )(ii) +1 <= 2000) & ((trava) = (0));
((((estoque_ingrediente_quantidade) <+ (({((ii) |-> (min(({((estoque_ingrediente_quantidade )(ii) + qq)}\/{2000}))))})))) : (((INGREDIENTES) +-> (((0) .. (2000))))));
((index_ingrediente) : (((((0) .. (card(dom(((estoque_ingrediente_quantidade) <+ (({((ii) |-> (min(({((estoque_ingrediente_quantidade )(ii) + qq)}\/{2000}))))})))))))) +-> (INGREDIENTES))));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 2000) & (0 +1 <= qq) & ((ii) : (dom(estoque_ingrediente_quantidade))) & ((trava) = (0)) & ((estoque_ingrediente_quantidade )(ii) +1 <= 2000);
((((estoque_ingrediente_quantidade) <+ (({((ii) |-> (max(({((estoque_ingrediente_quantidade )(ii) - qq)}\/{0}))))})))) : (((INGREDIENTES) +-> (((0) .. (2000))))));
((index_ingrediente) : (((((0) .. (card(dom(((estoque_ingrediente_quantidade) <+ (({((ii) |-> (max(({((estoque_ingrediente_quantidade )(ii) - qq)}\/{0}))))})))))))) +-> (INGREDIENTES))));
((ii) : (INGREDIENTES)) & ((aa) : (ALIMENTO)) & ((aa) : (dom(temporizador_alimento_valor))) & ((aa) : (dom(potencia_alimento_valor))) & ((trava) = (0));
((((receita_alimento_ingrediente) <+ (({((aa) |-> ((((receita_alimento_ingrediente )(aa)) \/ (({ii})))))})))) : (((ALIMENTO) <-> (POW(INGREDIENTES)))));
((ii) : (INGREDIENTES)) & ((aa) : (ALIMENTO)) & ((tt) : (((1) .. (7200)))) & ((pp) : (((150) .. (260)))) & not(aa : dom(temporizador_alimento_valor)) & not(aa : dom(potencia_alimento_valor)) & ((trava) = (0));
((((receita_alimento_ingrediente) \/ (({((aa) |-> ({}))})))) : (((ALIMENTO) <-> (POW(INGREDIENTES)))));
((((potencia_alimento_valor) \/ (({((aa) |-> (pp))})))) : (((ALIMENTO) +-> (((150) .. (260))))));
((((temporizador_alimento_valor) \/ (({((aa) |-> (tt))})))) : (((ALIMENTO) +-> (((1) .. (7200))))));
((aa) : (ALIMENTO)) & ((aa) : (dom(receita_alimento_ingrediente))) & ((trava) = (0));
(0 +1 <= (estoque_ingrediente_quantidade )(yy));
not((0 +1 <= (estoque_ingrediente_quantidade )(yy)));
((yy) : ((receita_alimento_ingrediente )(aa)));
((((estoque_ingrediente_quantidade) <+ (({((yy) |-> (max(({((estoque_ingrediente_quantidade )(yy) - 1)}\/{0}))))})))) : (((INGREDIENTES) +-> (((0) .. (2000))))));
(((temporizador_alimento_valor )(aa)) : (((0) .. (7200))));
((index_ingrediente) : (((((0) .. (card(dom(((estoque_ingrediente_quantidade) <+ (({((yy) |-> (max(({((estoque_ingrediente_quantidade )(yy) - 1)}\/{0}))))})))))))) +-> (INGREDIENTES))));
INGREDIENTES: FIN(INTEGER) & not(INGREDIENTES = {});
((index_ingrediente) : (((((0) .. (card(dom(estoque_ingrediente_quantidade))))) +-> (INGREDIENTES))));
((trava) : (NAT));
((potencia) : (((0) .. (260))));
((cronometro) : (((0) .. (7200))));
((temporizador_alimento_valor) : (((ALIMENTO) +-> (((1) .. (7200))))));
((potencia_alimento_valor) : (((ALIMENTO) +-> (((150) .. (260))))));
((estoque_ingrediente_quantidade) : (((INGREDIENTES) +-> (((0) .. (2000))))));
((receita_ingrediente_quantidade) : (((POW(INGREDIENTES)) <-> ((NAT-{0})))));
((receita_alimento_ingrediente) : (((ALIMENTO) <-> (POW(INGREDIENTES)))));
"Well definedness";
((dom(estoque_ingrediente_quantidade)) : (FIN(dom(estoque_ingrediente_quantidade))));
((ii) : (INGREDIENTES));
((estoque_ingrediente_quantidade) : (((dom(estoque_ingrediente_quantidade)) +-> (ran(estoque_ingrediente_quantidade)))));
((trava) = (1));
(0 +1 <= qq);
(qq +1 <= 2000);
((qq) : (NAT));
((estoque_ingrediente_quantidade )(ii) +1 <= 2000);
((ii) : (dom(estoque_ingrediente_quantidade)));
not(((({((estoque_ingrediente_quantidade )(ii) + qq)}\/{2000})) = ({})));
((((({((estoque_ingrediente_quantidade )(ii) + qq)}\/{2000})) /\ ((INTEGER - NATURAL)))) : (FIN(INTEGER)));
not(((({((estoque_ingrediente_quantidade )(ii) - qq)}\/{0})) = ({})));
((((({((estoque_ingrediente_quantidade )(ii) - qq)}\/{0})) /\ (NATURAL))) : (FIN(NATURAL)));
((aa) : (dom(potencia_alimento_valor)));
((aa) : (dom(temporizador_alimento_valor)));
((aa) : (ALIMENTO));
((aa) : (dom(receita_alimento_ingrediente)));
((receita_alimento_ingrediente) : (((dom(receita_alimento_ingrediente)) +-> (ran(receita_alimento_ingrediente)))));
not(aa : dom(potencia_alimento_valor));
not(aa : dom(temporizador_alimento_valor));
((pp) : (((150) .. (260))));
((tt) : (((1) .. (7200))));
((temporizador_alimento_valor) : (((dom(temporizador_alimento_valor)) +-> (ran(temporizador_alimento_valor)))))
END
&
THEORY EnumerateX
END
