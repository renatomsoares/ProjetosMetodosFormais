THEORY ProofList IS
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(95) & WellDefinedness_cadastrarReceita.2,(_f(130) => _f(132));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(95) & WellDefinedness_cadastrarReceita.1,(_f(130) => _f(102));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(90) & WellDefinedness_atualizarReceitaAdicinandoIngrediente.2,(_f(130) => _f(131));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(90) & WellDefinedness_atualizarReceitaAdicinandoIngrediente.1,(_f(130) => _f(94));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.12,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(107) & _f(49) & _f(117) => _f(118));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.11,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(107) & _f(49) & _f(18) => _f(116));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.10,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(107) & _f(49) => _f(115));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.9,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(106) & _f(105) & _f(44) => _f(111));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.8,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(106) & _f(105) & _f(41) => _f(43));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.7,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(106) & _f(104) & _f(46) => _f(114));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.6,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(106) & _f(104) & _f(46) => _f(113));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.5,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(106) & _f(104) & _f(46) => _f(112));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.4,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(106) & _f(104) & _f(44) => _f(111));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.3,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(106) & _f(104) & _f(41) => _f(43));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.2,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(29) & _f(39) => _f(110));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & fazerAlimento.1,(_f(53) & _f(91) & _f(108) & _f(54) & _f(109) & _f(34) => _f(38));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & cadastrarReceita.3,(_f(32) & _f(91) & _f(96) & _f(97) & _f(98) & _f(99) & _f(46) => _f(102));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & cadastrarReceita.2,(_f(32) & _f(91) & _f(96) & _f(97) & _f(98) & _f(99) & _f(7) & _f(10) => _f(101));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & cadastrarReceita.1,(_f(32) & _f(91) & _f(96) & _f(97) & _f(98) & _f(99) & _f(7) & _f(8) => _f(100));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & atualizarReceitaAdicinandoIngrediente.1,(_f(32) & _f(91) & _f(92) & _f(93) & _f(46) => _f(94));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & decrementarIngredienteDoEstoque.7,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(46) => _f(48));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & decrementarIngredienteDoEstoque.6,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(46) => _f(84));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & decrementarIngredienteDoEstoque.5,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(87) & _f(46) => _f(48));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & decrementarIngredienteDoEstoque.4,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(87) & _f(7) & _f(18) => _f(89));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & decrementarIngredienteDoEstoque.3,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(86) & _f(46) => _f(84));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & decrementarIngredienteDoEstoque.2,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(86) & _f(46) => _f(48));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & decrementarIngredienteDoEstoque.1,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(86) & _f(7) & _f(18) => _f(88));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & incrementarIngredienteDoEstoque.7,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(46) => _f(48));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & incrementarIngredienteDoEstoque.6,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(46) => _f(84));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & incrementarIngredienteDoEstoque.5,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(81) & _f(46) => _f(48));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & incrementarIngredienteDoEstoque.4,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(81) & _f(7) & _f(18) => _f(85));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & incrementarIngredienteDoEstoque.3,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(80) & _f(46) => _f(84));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & incrementarIngredienteDoEstoque.2,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(80) & _f(46) => _f(48));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & incrementarIngredienteDoEstoque.1,(_f(32) & _f(67) & _f(68) & _f(69) & _f(33) & _f(82) & _f(80) & _f(7) & _f(18) => _f(83));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.14,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(66) & _f(65) & _f(63) & _f(49) & _f(18) => _f(78));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.13,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(66) & _f(65) & _f(62) & _f(49) & _f(73) => _f(77));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.12,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(66) & _f(65) & _f(62) & _f(49) & _f(20) => _f(76));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.11,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(66) & _f(65) & _f(62) & _f(49) & _f(18) => _f(75));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.10,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(66) & _f(64) & _f(63) & _f(49) & _f(73) => _f(74));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.9,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(66) & _f(64) & _f(63) & _f(49) & _f(20) => _f(72));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.8,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(66) & _f(64) & _f(63) & _f(49) & _f(18) => _f(71));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.7,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(61) & _f(60) & _f(44) => _f(45));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.6,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(61) & _f(60) & _f(41) & _f(37) => _f(43));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.5,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(61) & _f(59) & _f(44) => _f(45));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.4,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(61) & _f(59) & _f(41) & _f(37) => _f(43));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.3,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(36) & _f(29) & _f(39) => _f(40));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.2,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(34) & _f(37) => _f(38));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(2) & inserirNovoIngredienteNoEstoque.1,(_f(32) & _f(67) & _f(68) & _f(69) & _f(70) & _f(34) & _f(35) => _f(36));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.10,(_f(32) & _f(33) & _f(28) & _f(29) & _f(31) & _f(46) => _f(51));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.9,(_f(32) & _f(33) & _f(28) & _f(29) & _f(31) & _f(49) => _f(50));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.8,(_f(32) & _f(33) & _f(28) & _f(29) & _f(30) & _f(46) => _f(48));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.7,(_f(32) & _f(33) & _f(28) & _f(29) & _f(30) & _f(46) => _f(47));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.6,(_f(32) & _f(33) & _f(28) & _f(29) & _f(30) & _f(44) => _f(45));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.5,(_f(32) & _f(33) & _f(28) & _f(29) & _f(30) & _f(41) & _f(37) => _f(43));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.4,(_f(32) & _f(33) & _f(28) & _f(29) & _f(30) & _f(41) & _f(35) => _f(42));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.3,(_f(32) & _f(33) & _f(28) & _f(29) & _f(39) => _f(40));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.2,(_f(32) & _f(33) & _f(34) & _f(37) => _f(38));
_f(1) & _f(5) & _f(6) & _f(22) & _f(23) & _f(27) & qntIngredienteNoEstoque.1,(_f(32) & _f(33) & _f(34) & _f(35) => _f(36));
_f(1) & _f(5) & _f(6) & Initialisation.7,(_f(7) & _f(20) => _f(21));
_f(1) & _f(5) & _f(6) & Initialisation.6,(_f(7) & _f(18) => _f(19));
_f(1) & _f(5) & _f(6) & Initialisation.5,(_f(7) & _f(16) => _f(17));
_f(1) & _f(5) & _f(6) & Initialisation.4,(_f(7) & _f(14) => _f(15));
_f(1) & _f(5) & _f(6) & Initialisation.3,(_f(7) & _f(12) => _f(13));
_f(1) & _f(5) & _f(6) & Initialisation.2,(_f(7) & _f(10) => _f(11));
_f(1) & _f(5) & _f(6) & Initialisation.1,(_f(7) & _f(8) => _f(9));
_f(1) & _f(2) & ValuesLemmas.1,(_f(3) => _f(4))
END
&
THEORY Formulas IS
((NAT) = (((0) .. (2147483647)))) & ((INT) = (((-2147483647) .. (2147483647))));
btrue;
"Valuation is correct";
((0) .. (1890)): FIN(INTEGER) & not(((0) .. (1890)) = {});
INGREDIENTES: FIN(INTEGER) & not(INGREDIENTES = {}) & ALIMENTO: FIN(INTEGER) & not(ALIMENTO = {});
((INGREDIENTES) = (((0) .. (1890)))) & ((ALIMENTO) = (((0) .. (1890))));
"Refinement is correct";
"Check invariant ((r_potencia) = (r_potencia$1))";
(({}) = (((r_potencia$1) <+ (({((0) |-> (0))})))));
"Check invariant ((r_tempo) = (r_tempo$1))";
(({}) = (((r_tempo$1) <+ (({((0) |-> (0))})))));
"Check invariant ((r_alimento) = (r_alimento$1))";
(({}) = (((r_alimento$1) <+ (({((0) |-> (0))})))));
"Check invariant ((r_receita) = (r_receita$1))";
(({}) = (((r_receita$1) <+ (({((0) |-> (0))})))));
"Check invariant ((r_ingredientes) = (r_ingredientes$1))";
(({}) = (((r_ingredientes$1) <+ (({((0) |-> (0))})))));
"Check invariant ((r_estoque) = (r_estoque$1))";
(({}) = (((r_estoque$1) <+ (({((0) |-> (0))})))));
"Check invariant ((r_in_index) = (r_in_index$1))";
(({}) = (((r_in_index$1) <+ (({((0) |-> (1))})))));
((qtd_alimento) : (NAT)) & ((qtd_ing_estoque) : (NAT)) & ((qtd_receita) : (NAT)) & existe : INGREDIENTES +-> NAT & dom(existe) = INGREDIENTES & ((existe) : (((INGREDIENTES) --> (NAT)))) & r_in_index : INGREDIENTES +-> NAT & dom(r_in_index) = INGREDIENTES & ((r_in_index) : (((INGREDIENTES) --> (NAT)))) & ((r_trava) : (NAT)) & r_potencia : ((0) .. (15)) +-> (NAT-{0}) & dom(r_potencia) = ((0) .. (15)) & ((r_potencia) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_potencia )[((0) .. (15))]) = (ran(potenciaR))) & r_tempo : ((0) .. (15)) +-> (NAT-{0}) & dom(r_tempo) = ((0) .. (15)) & ((r_tempo) : (((((0) .. (15))) --> ((NAT-{0}))))) & (((r_tempo )[((0) .. (15))]) = (ran(temporizacaoR))) & r_estoque : ((0) .. (15)) +-> NAT & dom(r_estoque) = ((0) .. (15)) & ((r_estoque) : (((((0) .. (15))) --> (NAT)))) & (((r_estoque )[((0) .. (15))]) = (ran(estoqueR))) & r_alimento : ((0) .. (15)) +-> NAT & dom(r_alimento) = ((0) .. (15)) & ((r_alimento) : (((((0) .. (15))) --> (NAT)))) & r_ingredientes : ((0) .. (15)) +-> INGREDIENTES & dom(r_ingredientes) = ((0) .. (15)) & ((r_ingredientes) : (((((0) .. (15))) --> (INGREDIENTES)))) & r_receita : ALIMENTO +-> NAT & dom(r_receita) = ALIMENTO & ((r_receita) : (((ALIMENTO) --> (NAT)))) & ((receita_al_inR) : (((ALIMENTO) <-> (POW(INGREDIENTES))))) & ((receita_in_qntR) : (((POW(INGREDIENTES)) <-> ((NAT-{0}))))) & ((estoqueR) : (((INGREDIENTES) +-> (((0) .. (10)))))) & ((potenciaR) : (((ALIMENTO) +-> (NAT)))) & ((temporizacaoR) : (((ALIMENTO) +-> (NAT)))) & ((cron) : (NAT)) & ((pot) : (NAT)) & ((trav) : (NAT)) & ((index_in) : (((((0) .. (card(dom(estoqueR))))) +-> (INGREDIENTES)))) & ((tempoDeUso) : (NAT)) & ((qtdIng) : (((0) .. (card(dom(estoqueR))))));
((r_potencia) = (r_potencia$1)) & ((r_tempo) = (r_tempo$1)) & ((r_alimento) = (r_alimento$1)) & ((r_receita) = (r_receita$1)) & ((r_ingredientes) = (r_ingredientes$1)) & ((r_estoque) = (r_estoque$1)) & ((r_trava) = (r_trava$1)) & ((r_in_index) = (r_in_index$1)) & ((qtd_receita) = (qtd_receita$1)) & ((qtd_alimento) = (qtd_alimento$1)) & ((qtd_ing_estoque) = (qtd_ing_estoque$1));
((ee) = (ee));
((ee$1) = (ee));
((ii) : (INGREDIENTES)) & ((ii) : (dom(estoqueR))) & ((qq) = (qq));
((qq$1) = (qq));
((ingrediente$1) : (INGREDIENTES));
((count$1) : (NAT));
not(ingrediente$1 = ii);
not(not(ingrediente$1 = ii));
((ii) : (INGREDIENTES));
((ii) : (dom(estoqueR)));
"Loop initialisation";
"Check invariant ((ingrediente) : (INGREDIENTES))";
((0) : (INGREDIENTES));
"Check invariant ((count) : (NAT))";
((0) : (NAT));
"Loop variant is positive";
(0 <= (qtd_ing_estoque$1 - count$1));
"Loop invariant is preserved";
(((r_ingredientes$1 )((r_in_index$1 )(ii))) : (INGREDIENTES));
(((count$1 + 1)) : (NAT));
"Variant is decreasing";
((qtd_ing_estoque$1 - (count$1 + 1)) +1 <= (qtd_ing_estoque$1 - count$1));
"Instruction Well Definess";
(((r_in_index$1 )(ii)) : (dom(r_ingredientes$1)));
((ii) : (dom(r_in_index$1)));
"End of loop";
(((r_estoque$1 )(count$1)) = ((r_estoque$1 )((r_in_index$1 )(ii))));
((count$1) : (dom(r_estoque$1)));
((r_trava) = (1)) & ((trav) = (1));
((r_trava$1) = (1));
((trav) = (1));
((r_trava) = (0)) & ((trav) = (0));
((r_trava$1) = (0));
((trav) = (0));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 10) & (0 +1 <= qq) & not(ii : dom(estoqueR));
((count$1) = (ii));
not(((count$1) = (ii)));
(count$1 <= qtd_ing_estoque$1);
(((existe )(ii)) = (0));
not((((existe )(ii)) = (0)));
((achou$1) = (0));
not(((achou$1) = (0)));
not((count$1 <= qtd_ing_estoque$1));
((qq) : (NAT));
(qq +1 <= 10);
(0 +1 <= qq);
not(ii : dom(estoqueR));
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (((r_estoque$1 )((r_in_index$1 )(ii)) + qq)))})))) = (((r_estoque$1) <+ (({(((qtd_ing_estoque$1 + 1)) |-> (qq))})))));
((r_in_index$1) = (((r_in_index$1) <+ (({((ii) |-> ((qtd_ing_estoque$1 + 1)))})))));
"Check invariant ((qtd_ing_estoque) = (qtd_ing_estoque$1))";
((qtd_ing_estoque$1) = ((qtd_ing_estoque$1 + 1)));
((((r_estoque$1) <+ (({(((qtd_ing_estoque$1 + 1)) |-> (qq))})))) = (r_estoque$1));
((((r_in_index$1) <+ (({((ii) |-> ((qtd_ing_estoque$1 + 1)))})))) = (r_in_index$1));
(((qtd_ing_estoque$1 + 1)) = (qtd_ing_estoque$1));
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (((r_estoque$1 )((r_in_index$1 )(ii)) + qq)))})))) = (r_estoque$1));
((ii) : (INGREDIENTES)) & ((qq) : (NAT)) & (qq +1 <= 10) & (0 +1 <= qq) & ((ii) : (dom(estoqueR))) & ((estoqueR )(ii) +1 <= 10);
(((r_estoque$1 )((r_in_index$1 )(ii)) + qq) +1 <= 10);
not((((r_estoque$1 )((r_in_index$1 )(ii)) + qq) +1 <= 10));
((estoqueR )(ii) +1 <= 10);
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (min(({((r_estoque$1 )((r_in_index$1 )(ii)) + qq)}\/{10}))))})))) = (((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (((r_estoque$1 )((r_in_index$1 )(ii)) + qq)))})))));
(((r_in_index$1 )(ii)) : (dom(r_estoque$1)));
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (min(({((r_estoque$1 )((r_in_index$1 )(ii)) + qq)}\/{10}))))})))) = (((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (10))})))));
(0 +1 <= ((r_estoque$1 )((r_in_index$1 )(ii)) - qq));
not((0 +1 <= ((r_estoque$1 )((r_in_index$1 )(ii)) - qq)));
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (max(({((r_estoque$1 )((r_in_index$1 )(ii)) - qq)}\/{0}))))})))) = (((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (((r_estoque$1 )((r_in_index$1 )(ii)) + qq)))})))));
((((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (max(({((r_estoque$1 )((r_in_index$1 )(ii)) - qq)}\/{0}))))})))) = (((r_estoque$1) <+ (({(((r_in_index$1 )(ii)) |-> (0))})))));
((ii) : (INGREDIENTES)) & ((aa) : (ALIMENTO)) & ((aa) : (dom(temporizacaoR))) & ((aa) : (dom(potenciaR)));
((aa) : (ALIMENTO));
((aa) : (dom(temporizacaoR)));
((aa) : (dom(potenciaR)));
((aa) : (dom(r_receita$1)));
((ii) : (INGREDIENTES)) & ((aa) : (ALIMENTO)) & ((tt) : ((NAT-{0}))) & ((pp) : ((NAT-{0}))) & not(aa : dom(temporizacaoR)) & not(aa : dom(potenciaR));
((tt) : ((NAT-{0})));
((pp) : ((NAT-{0})));
not(aa : dom(temporizacaoR));
not(aa : dom(potenciaR));
((((r_potencia$1) <+ (({(((qtd_receita$1 + 1)) |-> (pp))})))) = (((r_potencia$1) <+ (({(((qtd_alimento$1 + 1)) |-> (pp))})))));
((((r_tempo$1) <+ (({(((qtd_receita$1 + 1)) |-> (tt))})))) = (((r_tempo$1) <+ (({(((qtd_alimento$1 + 1)) |-> (tt))})))));
((aa) : (dom(((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))}))))));
((r_trava) = (1)) & ((aa) : (ALIMENTO)) & ((aa) : (dom(receita_al_inR))) & ((trav) = (1)) & (tempoDeUso +1 <= 2147483647);
((count$1) = (aa));
not(((count$1) = (aa)));
(count$1 <= qtd_alimento$1);
not((count$1 <= qtd_alimento$1));
((aa) : (dom(receita_al_inR)));
(tempoDeUso +1 <= 2147483647);
(0 <= (qtd_alimento$1 - count$1));
((qtd_alimento$1 - (count$1 + 1)) +1 <= (qtd_alimento$1 - count$1));
(((r_ingredientes$1 )(count$1)) : (dom(r_in_index$1)));
((count$1) : (dom(r_ingredientes$1)));
(((r_in_index$1 )((r_ingredientes$1 )(count$1))) : (dom(r_estoque$2)));
(((r_receita$1 )(aa)) : (ran(r_alimento$1)));
((((r_estoque$1) <+ (({(((r_in_index$1 )((r_ingredientes$1 )((r_receita$1 )(aa)))) |-> (((r_estoque$1 )((r_in_index$1 )((r_ingredientes$1 )((r_receita$1 )(aa)))) - 1)))})))) = (r_estoque$2));
"Check invariant ((r_trava) = (r_trava$1))";
((0) = (r_trava$1));
((qtd_alimento) = (qtd_alimento$1));
((qtd_receita) = (qtd_receita$1));
((r_in_index) = (r_in_index$1));
((r_trava) = (r_trava$1));
((r_estoque) = (r_estoque$1));
((r_ingredientes) = (r_ingredientes$1));
((r_receita) = (r_receita$1));
((r_alimento) = (r_alimento$1));
((r_tempo) = (r_tempo$1));
((r_potencia) = (r_potencia$1));
((ii) : (INGREDIENTES)) & ((ii) : (dom(estoqueR)));
"Well definedness";
((r_receita$1) : (((dom(r_receita$1)) +-> (ran(r_receita$1)))));
((((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))})))) : (((dom(((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))}))))) +-> (ran(((r_receita$1) <+ (({((aa) |-> ((qtd_receita$1 + 1)))}))))))))
END
&
THEORY EnumerateX
END
